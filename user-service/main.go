package main

import (
	"net/http"
	"os"
	"user-service/config"
	_ "user-service/docs" // docs is generated by Swag CLI, you have to import it.
	"user-service/handler"
	"user-service/middleware"
	"user-service/repository"
	"user-service/usecase"
	"user-service/utils"

	"github.com/go-playground/validator/v10"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	echoMiddleware "github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title Waste4Future User Service API
// @version 1.0
// @description This is the documentation of Waste4Future User Service API
// @host localhost:8080
// @schemes https http
// @BasePath /
// @SecurityDefinitions.apikey BearerAuth
// @In header
// @Name Authorization
func main() {
	// # Load ENV
	godotenv.Load()

	// # Initialize Database
	db := config.InitDB()

	// # Initialize validator for payload struct validation
	validator := validator.New()

	// # Initialize Echo
	e := echo.New()

	e.Use(echoMiddleware.Recover())
	e.Use(echoMiddleware.CORSWithConfig(echoMiddleware.CORSConfig{
		AllowOrigins:     []string{"https://p2-individual-project-52554c162621.herokuapp.com"},
		AllowMethods:     []string{echo.GET, echo.POST, echo.PUT, echo.DELETE, echo.OPTIONS},
		AllowHeaders:     []string{"Content-Type", "Authorization", "X-Requested-With"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
	}))

	// Ensure correct CORS response for preflight requests
	e.OPTIONS("/*", func(c echo.Context) error {
		return c.NoContent(http.StatusNoContent)
	})

	// # built-in middleware
	e.Pre(middleware.TrailingSlashMiddleware) // Custom middleware to remove trailing slash
	e.Use(middleware.WithLogger)              // Logger middleware

	// # Error handler
	e.HTTPErrorHandler = utils.HTTPErrorHandler

	// # Base Routes
	baseRoutes := e.Group("/api")

	// # Dependency Injection User
	userRoutes := baseRoutes.Group("/users")
	userRepo := repository.NewUserRepository(db)
	userUsecase := usecase.NewUserUsecase(userRepo, validator)
	userHandler := handler.NewUserUsecase(userUsecase)
	userHandler.InitRoutes(userRoutes)

	// # Swagger documentation route
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// # Get PORT from ENV
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	// # Log error
	e.Logger.Fatal(e.Start(":" + port))
}
