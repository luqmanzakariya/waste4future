basePath: /
definitions:
  request.UserCreateRequest:
    description: UserCreateRequest details.
    properties:
      address_id:
        example: ""
        maxLength: 200
        minLength: 1
        type: string
      email:
        example: newuser@mail.com
        maxLength: 200
        minLength: 1
        type: string
      name:
        example: new user
        maxLength: 200
        minLength: 1
        type: string
      password:
        example: password123
        maxLength: 200
        minLength: 1
        type: string
    required:
    - address_id
    - email
    - name
    - password
    type: object
  request.UserLoginRequest:
    description: UserLoginRequest details.
    properties:
      email:
        example: luqman@mail.com
        maxLength: 200
        minLength: 1
        type: string
      password:
        example: password123
        maxLength: 200
        minLength: 1
        type: string
    required:
    - email
    - password
    type: object
  response.TokenResponse:
    description: represents the standard token response format.
    properties:
      token:
        type: string
    type: object
  response.UserResponse:
    description: UserResponse details.
    properties:
      address_id:
        maxLength: 200
        minLength: 1
        type: string
      email:
        maxLength: 200
        minLength: 1
        type: string
      id:
        maximum: 200
        minimum: 1
        type: integer
      name:
        maxLength: 200
        minLength: 1
        type: string
    required:
    - address_id
    - email
    - id
    - name
    type: object
  response.WebResponse:
    description: represents the standard API response format.
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the documentation of Waste4Future User Service API
  title: Waste4Future User Service API
  version: "1.0"
paths:
  /api/users/login:
    post:
      description: Login users and get token authentication
      parameters:
      - description: user login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token generated
          schema:
            allOf:
            - $ref: '#/definitions/response.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.WebResponse'
            - properties:
                code:
                  type: integer
                data: {}
                status:
                  type: string
              type: object
      summary: Login users
      tags:
      - Users
  /api/users/me:
    get:
      description: Get detail user by token
      produces:
      - application/json
      responses:
        "200":
          description: Get detail users with token
          schema:
            allOf:
            - $ref: '#/definitions/response.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.WebResponse'
            - properties:
                code:
                  type: integer
                data: {}
                status:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Get detail user
      tags:
      - Users
  /api/users/register:
    post:
      description: Create new Users
      parameters:
      - description: create user payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Users created
          schema:
            allOf:
            - $ref: '#/definitions/response.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.WebResponse'
            - properties:
                code:
                  type: integer
                data: {}
                status:
                  type: string
              type: object
      summary: Create a Users
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
